# Quartz Configuration
# Configuration of Quartz is typically done through the use of a properties file,
# in conjunction with the use of StdSchedulerFactory (which consumes the configuration file and instantiates a scheduler).
# By default, StdSchedulerFactory load a properties file named ¡°quartz.properties¡± from the current working directory.
# If that fails, then the quartz.properties file located (as a resource) in the org/quartz package is loaded. To us e a file other than
# Alternatively, you can explicitly initialize the factory by calling one of the initialize() methods before calling getScheduler() on the StdSchedulerFactory.
# One property can reference another property's value by specifying a value following the convention of $@other.property.name.
# For example, to reference the scheduler's instance name as the value for some other property, you would use $@org.quartz.scheduler.instanceName.

# Can be any string, and the value has no meaning to the scheduler itself -
# but rather serves as a mechanism for client code to distinguish schedulers when multiple instances are used within the same program.
# If you are using the clustering features, you must use the same name for every instance in the cluster that is 'logically' the same Scheduler.
org.quartz.scheduler.instanceName = EvoWeatherScheduler

# Can be any string, but must be unique for all schedulers working as if they are the same 'logical' Scheduler within a cluster.
# You may use the value ¡°AUTO¡± as the instanceId if you wish the Id to be generated for you.
# Or the value ¡°SYS_PROP¡± if you want the value to come from the system property org.quartz.scheduler.instanceId.
org.quartz.scheduler.instanceId = com.github.longkerdandy.evo.service.weather

# A Boolean value (true or false) that specifies whether the main thread of the scheduler should be a daemon thread or not.
# See also the org.quartz.threadPool.makeThreadsDaemons property for tuning the SimpleThreadPool in ThreadPool Configuration
# if that is the thread pool implementation you are using (which is usually the case).
org.quartz.scheduler.makeSchedulerThreadDaemon = false

# A Boolean value (true or false) that specifies whether the threads spawned by Quartz will inherit the context ClassLoader of the initializing thread
# (i.e., the thread that initializes the Quartz instance).
# This will affect Quartz main scheduling thread, JDBCJobStore¡¯s misfire handling thread (if JDBCJobStore is used),
# cluster recovery thread (if clustering is used), and threads in SimpleThreadPool (if SimpleThreadPool is used).
# Setting this value to true may help with class loading, JNDI look-ups, and other issues related to using Quartz within an application server.
org.quartz.scheduler.threadsInheritContextClassLoaderOfInitializer = false

# Whether or not to skip running a quick web request to determine if there is an updated version of Quartz available for download.
# If the check runs, and an update is found, it will be reported as available in the Quartz logs.
# You can also disable the update check with the system property org.terracotta.quartz.skipUpdateCheck=true
#(which you can set in your system environment or as a -D on the Java command line). It is recommended that you disable the update check for production deployments.
org.quartz.scheduler.skipUpdateCheck = true

# The maximum number of triggers that a scheduler node is allowed to acquire (for firing) at once. Default value is 1.
# The larger the number, the more efficient firing is (in situations where there are very many triggers needing to be fired all at once),
# but at the cost of possible imbalanced load between cluster nodes. If the value of this property is > 1,
# and JDBC JobStore is used, then the property org.quartz.jobStore.acquireTriggersWithinLock must be set to true to avoid data corruption.
org.quartz.scheduler.batchTriggerAcquisitionMaxCount = 1


# The amount of time (in milliseconds) that a trigger is allowed to be acquired and fired ahead of its scheduled fire time.
# Defaults to 0. The larger the number, the more likely batch acquisition of triggers to fire will be able to select and fire more than one trigger at a time.
# However, this comes at the cost of the trigger schedule not being honored precisely (triggers might fire early).
# This property can be useful (for the sake of performance) in situations where the scheduler has a very large number of triggers that need to be fired at or near the same time.
org.quartz.scheduler.batchTriggerAcquisitionFireAheadTimeWindow = 0

# The number of threads available for concurrent execution of jobs. You can specify any positive integer,
# although only numbers between 1 and 100 are practical. If you only have a few jobs that fire a few times a day, then one thread is plenty.
# If you have tens of thousands of jobs, with many firing every minute, then you want a thread count more like 50 or 100
# (this highly depends on the nature of the work that your jobs perform, and your systems resources).
org.quartz.threadPool.threadCount = 8

# The number of milliseconds the scheduler will allow a trigger to pass its next-fire-time by before being considered misfired.
# The default value (if you don't make an entry of this property in your configuration) is 60000 (60 seconds).
org.quartz.jobStore.misfireThreshold = 600000